{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Indice","text":"<ul> <li>MONGO<ul> <li>TEORIA</li> <li>PRACTICA</li> </ul> </li> <li>MONGO-IOT<ul> <li>TEORIA</li> <li>PRACTICA</li> </ul> </li> </ul>"},{"location":"iot_mongo/practica/","title":"Ejercicios pr\u00e1cticos IoT Console","text":""},{"location":"iot_mongo/practica/#1-anadir-multiples-dispositivos","title":"1. A\u00f1adir m\u00faltiples dispositivos","text":"<p>Objetivo: Simular al menos 3 dispositivos distintos (<code>sensor_A</code>, <code>sensor_B</code>, <code>sensor_C</code>) y a\u00f1adir lecturas manuales o con el simulador para cada uno.</p> <p>Indicaciones:</p> <ul> <li>Usar el men\u00fa para insertar datos manualmente.</li> <li>Ejecutar <code>simulate.py</code> con distintos <code>device_id</code>.</li> </ul>"},{"location":"iot_mongo/practica/#2-listar-lecturas-por-fecha-concreta","title":"2. Listar lecturas por fecha concreta","text":"<p>Objetivo: Mostrar todas las lecturas del <code>sensor_A</code> entre dos fechas dadas (por ejemplo: del 1 de mayo al 3 de mayo).</p> <p>Indicaciones:</p> <ul> <li>Usar el men\u00fa y filtrar por <code>device_id</code> y rango de tiempo.</li> <li>Explora qu\u00e9 ocurre si introduces solo fecha inicio o solo fecha fin.</li> </ul>"},{"location":"iot_mongo/practica/#3-activar-alarma-si-temperatura-supera-umbral","title":"3. Activar alarma si temperatura supera umbral","text":"<p>Objetivo: Implementar una funci\u00f3n que muestre un mensaje de \u201c\u00a1ALERTA!\u201d si alguna lectura supera los 28\u202f\u00b0C.</p> <p>Indicaciones:</p> <ul> <li>Recorrer lecturas recientes con <code>get_readings()</code>.</li> <li>Filtrar con <code>if reading[\"data\"][\"temperature\"] &gt; 28:</code>.</li> </ul>"},{"location":"iot_mongo/practica/#4-listar-lecturas-por-hora-sin-importar-el-dispositivo","title":"4. Listar lecturas por hora, sin importar el dispositivo","text":"<p>Objetivo: Obtener todas las lecturas que se realizaron entre las 14:00 y 15:00 del 2 de mayo, sin filtrar por <code>device_id</code>.</p> <p>Indicaciones:</p> <ul> <li>Solo filtrar por <code>timestamp</code>.</li> <li>Usa <code>datetime.combine()</code> para definir la hora exacta.</li> </ul>"},{"location":"iot_mongo/practica/#5-comparar-dos-sensores-en-un-mismo-intervalo","title":"5. Comparar dos sensores en un mismo intervalo","text":"<p>Objetivo: Mostrar en paralelo las lecturas de <code>sensor_A</code> y <code>sensor_B</code> entre el 1 y el 2 de mayo.</p> <p>Indicaciones:</p> <ul> <li>Llamar dos veces a <code>get_readings()</code> con mismo rango de tiempo.</li> <li>Mostrar resultados alternando sensores o en tablas paralelas.</li> </ul>"},{"location":"iot_mongo/practica/#6-calcular-promedio-diario-de-cada-sensor","title":"6. Calcular promedio diario de cada sensor","text":"<p>Objetivo: Calcular la temperatura media diaria de cada sensor a lo largo de 3 d\u00edas.</p> <p>Indicaciones:</p> <ul> <li>Agrupar lecturas por fecha (<code>timestamp.date()</code>).</li> <li>Calcular la media por d\u00eda y por sensor.</li> </ul>"},{"location":"iot_mongo/practica/#7-obtener-ultima-lectura-de-cada-sensor","title":"7. Obtener \u00faltima lectura de cada sensor","text":"<p>Objetivo: Mostrar la lectura m\u00e1s reciente de todos los sensores disponibles.</p> <p>Indicaciones:</p> <ul> <li>Obtener lista de <code>device_id</code> distintos (<code>distinct(\"device_id\")</code>).</li> <li>Para cada uno, buscar <code>find_one()</code> ordenado por <code>timestamp</code> descendente.</li> </ul>"},{"location":"iot_mongo/practica/#8-generar-listado-con-diferencias-de-temperatura-hora-a-hora","title":"8. Generar listado con diferencias de temperatura hora a hora","text":"<p>Objetivo: Para un sensor espec\u00edfico, calcular cu\u00e1nto vari\u00f3 la temperatura entre una hora y la siguiente.</p> <p>Indicaciones:</p> <ul> <li>Agrupar lecturas por hora.</li> <li>Calcular diferencia entre cada lectura consecutiva.</li> </ul>"},{"location":"iot_mongo/practica/#9-simular-y-guardar-datos-cada-x-segundos-avanzado","title":"9. Simular y guardar datos cada X segundos (avanzado)","text":"<p>Objetivo: Modificar <code>simulate.py</code> para guardar datos de dos sensores alternando cada 5 segundos.</p> <p>Indicaciones:</p> <ul> <li>Alternar <code>device_id</code> dentro del bucle con un contador.</li> <li>Usar un <code>try-except</code> para controlar interrupciones.</li> </ul>"},{"location":"iot_mongo/practica/#10-exportar-lecturas-combinadas-a-json","title":"10. Exportar lecturas combinadas a JSON","text":"<p>Objetivo: Exportar a un archivo <code>lecturas.json</code> todas las lecturas de <code>sensor_A</code> y <code>sensor_B</code> en el mismo archivo, en orden cronol\u00f3gico.</p> <p>Indicaciones:</p> <ul> <li>Usar <code>get_readings()</code> con ambos sensores.</li> <li>Unir listas, ordenarlas por <code>timestamp</code> y escribir con <code>json.dump()</code>.</li> </ul>"},{"location":"iot_mongo/practica/#anexos","title":"Anexos","text":""},{"location":"iot_mongo/practica/#documentacion-clase-reading","title":"Documentaci\u00f3n: Clase <code>Reading</code>","text":""},{"location":"iot_mongo/practica/#descripcion-general","title":"\ud83d\udcc4 Descripci\u00f3n General","text":"<p>La clase <code>Reading</code> representa una lectura de sensor IoT destinada a ser almacenada en una base de datos MongoDB, especialmente dentro de una colecci\u00f3n time-series. Su estructura est\u00e1 dise\u00f1ada para garantizar compatibilidad con los requisitos de MongoDB en cuanto a almacenamiento temporal eficiente.</p>"},{"location":"iot_mongo/practica/#proposito","title":"\ud83d\udcca Prop\u00f3sito","text":"<p>Facilitar la creaci\u00f3n de documentos que contienen datos de sensores con:</p> <ul> <li>Marca temporal (timestamp)</li> <li>Metadatos del dispositivo</li> <li>Datos registrados (ej. temperatura o \u00edndice de humedad)</li> <li>Identificador directo del dispositivo</li> </ul> <p>Estos documentos son luego insertados en MongoDB mediante funciones como <code>insert_one()</code>.</p>"},{"location":"iot_mongo/practica/#definicion-de-la-clase","title":"\ud83d\udd22 Definici\u00f3n de la Clase","text":"<pre><code>from datetime import datetime\n\nclass Reading:\n    def __init__(self, device_id, value, variable_type=\"temperature\", timestamp=None):\n        self.timestamp = timestamp or datetime.utcnow()\n        self.metadata = {\n            \"device_id\": device_id,\n            \"variable_type\": variable_type\n        }\n        self.data = { variable_type: value }\n        self.device_id = device_id\n</code></pre>"},{"location":"iot_mongo/practica/#atributos","title":"\ud83d\udd0d Atributos","text":"Atributo Tipo Descripci\u00f3n <code>timestamp</code> <code>datetime</code> Fecha y hora de la lectura. Si no se proporciona, se usa la hora actual en UTC. <code>metadata</code> <code>dict</code> Diccionario con informaci\u00f3n contextual. Incluye <code>device_id</code> y el tipo de variable medida. <code>data</code> <code>dict</code> Datos reales de la lectura, como <code>temperature</code> o <code>humidity_index</code>. <code>device_id</code> <code>str</code> Identificador del sensor que tom\u00f3 la lectura."},{"location":"iot_mongo/practica/#ejemplo-de-uso","title":"\ud83d\udd04 Ejemplo de Uso","text":"<pre><code>from schemas import Reading\nfrom models import add_reading\n\n# Crear una lectura de temperatura\nlectura_temp = Reading(\"sensor_A\", 23.5, variable_type=\"temperature\")\n\n# Crear una lectura de \u00edndice de humedad\nlectura_humedad = Reading(\"sensor_B\", 60.2, variable_type=\"humidity_index\")\n\n# Insertar en la base de datos\nadd_reading(lectura_temp)\nadd_reading(lectura_humedad)\n</code></pre> <p>Esto genera un documento como:</p> <pre><code>{\n  \"timestamp\": \"2025-05-12T15:00:00Z\",\n  \"metadata\": {\n    \"device_id\": \"sensor_B\",\n    \"variable_type\": \"humidity_index\"\n  },\n  \"data\": {\n    \"humidity_index\": 60.2\n  },\n  \"device_id\": \"sensor_B\"\n}\n</code></pre>"},{"location":"iot_mongo/practica/#integracion-con-mongodb-time-series","title":"\ud83d\ude80 Integraci\u00f3n con MongoDB Time-Series","text":"<p>MongoDB utiliza colecciones especiales para datos temporales. Esta clase respeta la estructura recomendada para ellas:</p> <ul> <li><code>timestamp</code>: campo obligatorio como referencia temporal.</li> <li><code>metadata</code>: campo opcional recomendado para agrupar lecturas por dispositivo.</li> <li><code>data</code>: contenedor del valor medido.</li> </ul> <p>Esta estructura optimiza:</p> <ul> <li>Almacenamiento en \"buckets\"</li> <li>Compresi\u00f3n autom\u00e1tica</li> <li>Consultas por tiempo o dispositivo</li> </ul>"},{"location":"iot_mongo/practica/#buenas-practicas","title":"\ud83d\udd27 Buenas pr\u00e1cticas","text":"<ul> <li>Usar <code>datetime.utcnow()</code> para mantener coherencia horaria.</li> <li>Separar metadatos de los datos medidos.</li> <li>Evitar campos adicionales innecesarios que compliquen las consultas.</li> </ul>"},{"location":"iot_mongo/practica/#conclusion","title":"\u2705 Conclusi\u00f3n","text":"<p>La clase <code>Reading</code> proporciona una interfaz sencilla y estructurada para capturar lecturas de sensores y almacenarlas en MongoDB de forma eficiente y escalable. Es fundamental en proyectos IoT donde la organizaci\u00f3n temporal y la flexibilidad de los datos son claves. Ahora adem\u00e1s permite registrar distintas variables como temperatura o \u00edndice de humedad, haciendo el sistema m\u00e1s vers\u00e1til.</p>"},{"location":"iot_mongo/teoria/","title":"Teoria","text":""},{"location":"iot_mongo/teoria/#python-mongodb-iot-consola","title":"Python + MongoDB + IoT (Consola)","text":""},{"location":"iot_mongo/teoria/#1-introduccion-10-min","title":"1. Introducci\u00f3n (10 min)","text":"<p>Objetivo: Explicar qu\u00e9 es IoT, por qu\u00e9 MongoDB, y c\u00f3mo Python facilita su integraci\u00f3n.</p>"},{"location":"iot_mongo/teoria/#conceptos-clave","title":"Conceptos clave","text":"<ul> <li>IoT = sensores que generan datos constantemente.</li> <li>MongoDB = base NoSQL flexible, ideal para datos de sensores.</li> <li>Python = lenguaje con gran ecosistema para backend, scripting y datos.</li> </ul>"},{"location":"iot_mongo/teoria/#2-estructura-del-proyecto-5-min","title":"2. Estructura del Proyecto (5 min)","text":"<pre><code>iot_console/\n\u251c\u2500\u2500 main.py              # Punto de entrada\n\u251c\u2500\u2500 database.py          # Conexi\u00f3n MongoDB\n\u251c\u2500\u2500 schemas.py           # Estructura de datos\n\u251c\u2500\u2500 models.py            # Acceso a la BD\n\u251c\u2500\u2500 cli.py               # Men\u00fa interactivo\n\u251c\u2500\u2500 simulate.py          # Simulaci\u00f3n de datos\n</code></pre>"},{"location":"iot_mongo/teoria/#3-conexion-a-mongodb-5-min","title":"3. Conexi\u00f3n a MongoDB (5 min)","text":"<p>\ud83d\udcc4 <code>database.py</code></p> <pre><code>from pymongo import MongoClient\n\nclient = MongoClient(\"mongodb://localhost:27017\")\ndb = client[\"ecm_mongo_db\"]\nreadings_collection = db[\"DeviceData\"]  # Colecci\u00f3n time-series\n</code></pre> <p>\ud83d\udcdd Explicar</p> <ul> <li>MongoClient \u2192 conexi\u00f3n.</li> <li>Colecci\u00f3n time-series (estructura especial).</li> </ul>"},{"location":"iot_mongo/teoria/#concepto-colecciones-time-series-en-mongodb","title":"\ud83d\udcd8 Concepto: Colecciones Time-Series en MongoDB","text":""},{"location":"iot_mongo/teoria/#que-es-una-coleccion-time-series","title":"\u00bfQu\u00e9 es una colecci\u00f3n Time-Series?","text":"<p>Una colecci\u00f3n time-series est\u00e1 dise\u00f1ada espec\u00edficamente para almacenar datos que llegan en secuencia temporal, como los provenientes de sensores IoT.</p> <p>MongoDB almacena autom\u00e1ticamente estos datos en \"buckets\" comprimidos para ahorrar espacio y acelerar consultas por tiempo.</p>"},{"location":"iot_mongo/teoria/#caracteristicas-clave","title":"\ud83c\udff7\ufe0f Caracter\u00edsticas clave","text":"Propiedad Descripci\u00f3n <code>timeField</code> Campo que representa el timestamp (obligatorio) <code>metaField</code> Campo con informaci\u00f3n com\u00fan al dispositivo o sensor (opcional pero \u00fatil) <code>granularity</code> Nivel de precisi\u00f3n esperado: <code>\"seconds\"</code>, <code>\"minutes\"</code> o <code>\"hours\"</code> Optimizaci\u00f3n interna MongoDB organiza datos en buckets por eficiencia"},{"location":"iot_mongo/teoria/#ejemplo-de-documento","title":"\ud83d\udcc4 Ejemplo de documento","text":"<pre><code>{\n  \"timestamp\": \"2025-04-30T12:00:00Z\",\n  \"metadata\": {\n    \"device_id\": \"sensor_A\",\n    \"variable_type\": \"temperature\"\n  },\n  \"data\": {\n    \"temperature\": 22.4\n  },\n  \"device_id\": \"sensor_A\"\n}\n</code></pre>"},{"location":"iot_mongo/teoria/#como-crear-una-coleccion-time-series-en-python","title":"\ud83e\uddea C\u00f3mo crear una colecci\u00f3n Time-Series en Python","text":"<pre><code>from pymongo import MongoClient\n\nclient = MongoClient(\"mongodb://localhost:27017\")\ndb = client[\"ecm_mongo_db\"]\n\n# Solo crear si no existe\nif \"DeviceData\" not in db.list_collection_names():\n    db.create_collection(\n        \"DeviceData\",\n        timeseries={\n            \"timeField\": \"timestamp\",         # obligatorio\n            \"metaField\": \"metadata\",          # opcional pero recomendable\n            \"granularity\": \"seconds\"          # \"seconds\", \"minutes\", \"hours\"\n        }\n    )\n    print(\"\u2705 Colecci\u00f3n time-series creada.\")\n</code></pre>"},{"location":"iot_mongo/teoria/#insercion-de-datos-en-la-coleccion","title":"Inserci\u00f3n de datos en la colecci\u00f3n","text":"<pre><code>from datetime import datetime\ndoc = {\n    \"timestamp\": datetime.utcnow(),\n    \"metadata\": {\n        \"device_id\": \"sensor_A\",\n        \"variable_type\": \"temperature\"\n    },\n    \"data\": {\n        \"temperature\": 22.5\n    },\n    \"device_id\": \"sensor_A\"\n}\n\ndb.DeviceData.insert_one(doc)\n</code></pre>"},{"location":"iot_mongo/teoria/#consulta-filtrando-por-tiempo","title":"\ud83d\udd0d Consulta filtrando por tiempo","text":"<pre><code>from datetime import datetime\n\nstart = datetime(2025, 4, 30, 11, 0, 0)\nend = datetime(2025, 4, 30, 12, 0, 0)\n\nresults = db.DeviceData.find({\n    \"device_id\": \"sensor_A\",\n    \"timestamp\": {\"$gte\": start, \"$lte\": end}\n})\n\nfor doc in results:\n    print(doc)\n</code></pre>"},{"location":"iot_mongo/teoria/#por-que-usar-time-series-en-lugar-de-una-coleccion-normal","title":"\u00bfPor qu\u00e9 usar Time-Series en lugar de una colecci\u00f3n normal?","text":"Ventaja Normal Time-Series Compresi\u00f3n autom\u00e1tica \u274c \u2705 Optimizaci\u00f3n por tiempo \u274c \u2705 Consulta eficiente por fecha \u26a0\ufe0f \u2705 TTL autom\u00e1tico (opcional) \u2705 \u2705"},{"location":"iot_mongo/teoria/#buenas-practicas","title":"\ud83e\uddf0 Buenas pr\u00e1cticas","text":"<ul> <li>Usa <code>datetime.utcnow()</code> para mantener coherencia de zona horaria.</li> <li>Usa <code>metadata.device_id</code> como clave de agrupaci\u00f3n.</li> <li>Crea \u00edndices secundarios si haces muchas b\u00fasquedas por <code>metadata.variable_type</code>.</li> </ul>"},{"location":"iot_mongo/teoria/#4-modelo-de-datos-10-min","title":"\ud83e\uddf1 4. Modelo de Datos (10 min)","text":"<p><code>schemas.py</code></p> <pre><code>from datetime import datetime\n\nclass Reading:\n    def __init__(self, device_id, temperature, timestamp=None):\n        self.timestamp = timestamp or datetime.utcnow()\n        self.metadata = {\n            \"device_id\": device_id,\n            \"variable_type\": \"temperature\"\n        }\n        self.data = { \"temperature\": temperature }\n        self.device_id = device_id\n</code></pre> <p>La estructura que Mongo espera:         - timestamp autom\u00e1tico con <code>datetime.utcnow()</code>.         - Campos <code>metadata</code>, <code>data</code>, <code>device_id</code>.</p>"},{"location":"iot_mongo/teoria/#5-operaciones-crud-10-min","title":"\ud83e\udde0 5. Operaciones CRUD (10 min)","text":"<p><code>models.py</code></p> <pre><code>def add_reading(reading):\n    readings_collection.insert_one(vars(reading))\n\ndef get_readings(device_id, start_time=None, end_time=None):\n    query = {\"device_id\": device_id}\n    if start_time and end_time:\n        query[\"timestamp\"] = {\"$gte\": start_time, \"$lte\": end_time}\n    elif start_time:\n        query[\"timestamp\"] = {\"$gte\": start_time}\n    elif end_time:\n        query[\"timestamp\"] = {\"$lte\": end_time}\n    return list(readings_collection.find(query))\n</code></pre>"},{"location":"iot_mongo/teoria/#6-menu-en-consola-15-min","title":"6. Men\u00fa en Consola (15 min)","text":"<p><code>cli.py</code></p> <ul> <li>Agrega lecturas manuales</li> <li>Consulta por <code>device_id</code> y por rango de tiempo</li> </ul> <p>\ud83d\udd0d Formato de fecha: <code>YYYY-MM-DD HH:MM:SS</code> o <code>YYYY-MM-DD HH:MM:SS.ffffff</code></p> <p>Ejemplo: <pre><code>Fecha inicio (YYYY-MM-DD HH:MM:SS[.ffffff]) [opcional]: 2025-04-30 11:30:00\n</code></pre></p>"},{"location":"iot_mongo/teoria/#7-simulador-automatico-10-min","title":"7. Simulador autom\u00e1tico (10 min)","text":"<p>\ud83d\udcc4 <code>simulate.py</code></p> <pre><code>def simulate_readings(device_id=\"device_demo\", interval=5):\n    while True:\n        temperature = round(random.uniform(18, 30), 2)\n        doc = {\n            \"timestamp\": datetime.utcnow(),\n            \"metadata\": {\n                \"device_id\": device_id,\n                \"variable_type\": \"temperature\"\n            },\n            \"data\": { \"temperature\": temperature },\n            \"device_id\": device_id\n        }\n        collection.insert_one(doc)\n        print(f\"Insertada lectura: {temperature}\u00b0C\")\n        time.sleep(interval)\n</code></pre>"},{"location":"iot_mongo/teoria/#8-visualizacion-en-mongodb-5-min","title":"8. Visualizaci\u00f3n en MongoDB (5 min)","text":"<p>Usar MongoDB Compass o l\u00ednea de comandos:</p> <pre><code>db.DeviceData.find({ \"device_id\": \"device_demo\" }).sort({ timestamp: -1 })\n</code></pre>"},{"location":"iot_mongo/teoria/#9-practica-guiada-2030-min","title":"9. Pr\u00e1ctica Guiada (20\u201330 min)","text":"<p>Actividades sugeridas: - Insertar lecturas manualmente. - Consultar por intervalo de tiempo. - Ejecutar el simulador. - Ver datos en MongoDB Compass.</p>"},{"location":"iot_mongo/teoria/#10-preguntas-y-cierre-10-min","title":"10. Preguntas y Cierre (10 min)","text":"<p>Posibles temas: - \u00bfC\u00f3mo se adapta esto a m\u00faltiples variables (humedad, presi\u00f3n, etc.)? - \u00bfQu\u00e9 pasa si el sensor manda datos cada segundo? (Time Series est\u00e1 optimizado) - \u00bfC\u00f3mo proteger la base de datos? (auth, roles, firewalls)</p>"},{"location":"iot_mongo/ejemplo/soluciones/","title":"Soluciones","text":""},{"location":"iot_mongo/ejemplo/soluciones/#resumen-de-instrucciones-por-ejercicio","title":"\ud83d\udccb Resumen de instrucciones por ejercicio","text":"N\u00ba Instrucciones clave 1 <code>insert_one</code>, <code>simulate_readings()</code> con par\u00e1metro 2 <code>find()</code> con filtro de <code>timestamp</code> y <code>device_id</code> 3 <code>find()</code>, condicional <code>if</code> con <code>data.temperature</code> 4 <code>find()</code> con rango horario en <code>timestamp</code> 5 <code>find()</code> por dos <code>device_id</code> diferentes, combinar resultados 6 Agrupar por d\u00eda, <code>datetime.date()</code>, calcular media 7 <code>distinct()</code>, <code>find_one()</code> con <code>sort()</code> descendente 8 Ordenar por hora, comparar temperaturas consecutivas 9 Simulaci\u00f3n con <code>sleep</code>, control con contador 10 Exportar datos a <code>.json</code>, <code>json.dump()</code>, <code>sort()</code>"},{"location":"iot_mongo/ejemplo/soluciones/#fragmentos-de-ejemplo","title":"\ud83e\uddea Fragmentos de ejemplo","text":""},{"location":"iot_mongo/ejemplo/soluciones/#1-insertar-lectura-para-varios-dispositivos","title":"1. \u2795 Insertar lectura para varios dispositivos","text":"<pre><code>from datetime import datetime\nfrom database import readings_collection\n\nreading = {\n    \"timestamp\": datetime.utcnow(),\n    \"metadata\": {\"device_id\": \"sensor_B\", \"variable_type\": \"temperature\"},\n    \"data\": {\"temperature\": 25.4},\n    \"device_id\": \"sensor_B\"\n}\nreadings_collection.insert_one(reading)\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#2-lecturas-entre-fechas","title":"2. \ud83d\udcc5 Lecturas entre fechas","text":"<pre><code>from datetime import datetime\n\nstart = datetime(2025, 5, 1)\nend = datetime(2025, 5, 3)\nresults = readings_collection.find({\n    \"device_id\": \"sensor_A\",\n    \"timestamp\": {\"$gte\": start, \"$lte\": end}\n})\nfor r in results:\n    print(r)\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#3-lecturas-con-temperatura-28-c","title":"3. \ud83d\udea8 Lecturas con temperatura &gt; 28\u202f\u00b0C","text":"<pre><code>for doc in readings_collection.find():\n    if doc[\"data\"][\"temperature\"] &gt; 28:\n        print(\"\u00a1ALERTA!\", doc)\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#4-lecturas-entre-horas-sin-filtrar-por-sensor","title":"4. \ud83d\udd52 Lecturas entre horas sin filtrar por sensor","text":"<pre><code>from datetime import datetime\n\nstart = datetime(2025, 5, 2, 14, 0, 0)\nend = datetime(2025, 5, 2, 15, 0, 0)\nresults = readings_collection.find({\n    \"timestamp\": {\"$gte\": start, \"$lte\": end}\n})\nfor r in results:\n    print(r)\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#5-lecturas-combinadas-de-dos-sensores","title":"5. \ud83d\udd17 Lecturas combinadas de dos sensores","text":"<pre><code>a = list(readings_collection.find({\"device_id\": \"sensor_A\"}))\nb = list(readings_collection.find({\"device_id\": \"sensor_B\"}))\ncombinadas = sorted(a + b, key=lambda d: d[\"timestamp\"])\nfor r in combinadas:\n    print(r)\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#6-promedio-diario-por-sensor","title":"6. \ud83d\udcca Promedio diario por sensor","text":"<pre><code>from collections import defaultdict\n\nresultados = defaultdict(list)\nfor doc in readings_collection.find({\"device_id\": \"sensor_A\"}):\n    dia = doc[\"timestamp\"].date()\n    resultados[dia].append(doc[\"data\"][\"temperature\"])\n\nfor dia, temps in resultados.items():\n    media = sum(temps) / len(temps)\n    print(f\"{dia}: {media:.2f}\u202f\u00b0C\")\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#7-ultima-lectura-de-cada-sensor","title":"7. \u23f0 \u00daltima lectura de cada sensor","text":"<pre><code>device_ids = readings_collection.distinct(\"device_id\")\nfor dev in device_ids:\n    last = readings_collection.find_one(\n        {\"device_id\": dev},\n        sort=[(\"timestamp\", -1)]\n    )\n    print(dev, last[\"timestamp\"], last[\"data\"][\"temperature\"])\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#8-diferencia-entre-horas-consecutivas","title":"8. \ud83d\udcc8 Diferencia entre horas consecutivas","text":"<pre><code>from itertools import pairwise\n\nlecturas = list(readings_collection.find({\"device_id\": \"sensor_A\"}).sort(\"timestamp\", 1))\nfor a, b in pairwise(lecturas):\n    temp_diff = b[\"data\"][\"temperature\"] - a[\"data\"][\"temperature\"]\n    print(f\"{a['timestamp']} \u2192 {b['timestamp']}: \u0394T = {temp_diff:.2f}\")\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#9-simulacion-alternando-sensores","title":"9. \ud83d\udd04 Simulaci\u00f3n alternando sensores","text":"<pre><code>import time, random\nfrom datetime import datetime\n\nids = [\"sensor_X\", \"sensor_Y\"]\ni = 0\n\ntry:\n    while True:\n        dev = ids[i % 2]\n        temp = round(random.uniform(18, 30), 2)\n        doc = {\n            \"timestamp\": datetime.utcnow(),\n            \"metadata\": {\"device_id\": dev, \"variable_type\": \"temperature\"},\n            \"data\": {\"temperature\": temp},\n            \"device_id\": dev\n        }\n        readings_collection.insert_one(doc)\n        print(f\"[{dev}] Insertado: {temp}\u202f\u00b0C\")\n        time.sleep(5)\n        i += 1\nexcept KeyboardInterrupt:\n    print(\"Simulaci\u00f3n detenida.\")\n</code></pre>"},{"location":"iot_mongo/ejemplo/soluciones/#10-exportar-combinadas-a-json","title":"10. \ud83d\udce4 Exportar combinadas a JSON","text":"<pre><code>import json\n\ndata = list(readings_collection.find({\n    \"device_id\": {\"$in\": [\"sensor_A\", \"sensor_B\"]}\n}).sort(\"timestamp\", 1))\n\nwith open(\"lecturas.json\", \"w\") as f:\n    json.dump(data, f, default=str, indent=2)\n</code></pre>"},{"location":"mongo/contenido/","title":"PYTHON + MONGODB","text":""},{"location":"mongo/contenido/#base-de-datos-en-mongodb","title":"Base de Datos en MongoDB","text":"<p>Una base de datos en MongoDB es un contenedor que almacena colecciones de documentos JSON. A diferencia de las bases de datos relacionales tradicionales (SQL), MongoDB es NoSQL, lo que significa que no usa tablas, filas ni relaciones estrictas entre entidades. En su lugar, los datos se organizan en estructuras m\u00e1s flexibles denominadas documentos dentro de colecciones.</p>"},{"location":"mongo/contenido/#caracteristicas-claves-de-una-base-de-datos-en-mongodb","title":"Caracter\u00edsticas Claves de una Base de Datos en MongoDB","text":"<ol> <li>Almacenamiento de Documentos JSON/BSON </li> <li>Cada registro en MongoDB se almacena en un documento JSON (internamente convertido a BSON para optimizaci\u00f3n).</li> <li> <p>Un documento puede contener diferentes campos y estructuras, sin necesidad de un esquema fijo.</p> </li> <li> <p>No usa Esquema Fijo </p> </li> <li>En bases de datos relacionales (SQL), cada tabla tiene columnas con tipos de datos definidos.  </li> <li> <p>En MongoDB, cada documento dentro de una colecci\u00f3n puede tener diferentes campos, lo que brinda mayor flexibilidad.</p> </li> <li> <p>Escalabilidad Horizontal </p> </li> <li> <p>MongoDB permite distribuir datos en varios servidores mediante un sistema de sharding, lo que mejora la escalabilidad.</p> </li> <li> <p>Consultas R\u00e1pidas </p> </li> <li> <p>Utiliza \u00edndices y un potente motor de b\u00fasqueda para realizar consultas eficientes sin la necesidad de hacer uniones (joins).</p> </li> <li> <p>Colecciones en lugar de Tablas </p> </li> <li>En lugar de tablas, MongoDB usa colecciones, donde se almacenan m\u00faltiples documentos.</li> <li> <p>Las colecciones pueden almacenar documentos con estructuras variables.</p> </li> <li> <p>Base de Datos Distribuida </p> </li> <li>MongoDB puede trabajar en un entorno distribuido, permitiendo replicaci\u00f3n de datos y alta disponibilidad.</li> </ol>"},{"location":"mongo/contenido/#ejemplo-de-una-base-de-datos-en-mongodb","title":"Ejemplo de una Base de Datos en MongoDB","text":"<p>Supongamos que tenemos una base de datos llamada <code>empresaDB</code> con dos colecciones:</p> <ol> <li>Colecci\u00f3n <code>empleados</code></li> </ol> <pre><code>{\n    \"_id\": ObjectId(\"507f1f77bcf86cd799439011\"),\n    \"nombre\": \"Juan P\u00e9rez\",\n    \"cargo\": \"Desarrollador\",\n    \"edad\": 30,\n    \"salario\": 50000\n}\n</code></pre> <ol> <li>Colecci\u00f3n <code>proyectos</code></li> </ol> <pre><code>{\n    \"_id\": ObjectId(\"507f191e810c19729de860ea\"),\n    \"nombre\": \"Sistema de Ventas\",\n    \"responsable\": \"Juan P\u00e9rez\",\n    \"presupuesto\": 100000\n}\n</code></pre> <p>Como puedes ver:</p> <ul> <li>Cada documento es un objeto JSON con campos personalizados.</li> <li>No es necesario que todos los documentos tengan los mismos campos.</li> <li>Los documentos pueden referenciarse entre s\u00ed (por ejemplo, <code>responsable</code> en <code>proyectos</code> puede coincidir con un <code>nombre</code> en <code>empleados</code>).</li> </ul>"},{"location":"mongo/contenido/#comparacion-con-bases-de-datos-relacionales","title":"Comparaci\u00f3n con Bases de Datos Relacionales","text":"Caracter\u00edstica MongoDB (NoSQL) Bases Relacionales (SQL) Estructura Documentos JSON/BSON Tablas con filas/columnas Esquema Flexible, sin esquema fijo Estricto, con esquema definido Escalabilidad Horizontal (sharding) Vertical (m\u00e1s potencia al servidor) Relaci\u00f3n entre datos Referencias y embebidos Claves for\u00e1neas y joins Rendimiento Optimizado para lectura/escritura r\u00e1pida M\u00e1s lento en grandes vol\u00famenes con joins <p>En resumen, MongoDB es ideal para aplicaciones modernas que requieren escalabilidad, flexibilidad y rendimiento en grandes vol\u00famenes de datos.</p> <p>Si necesitas m\u00e1s informaci\u00f3n o ejemplos, dime. \ud83d\ude80</p>"},{"location":"mongo/contenido/#descripcion-de-la-funcionalidad-de-la-aplicacion-mongodb-crud","title":"Descripci\u00f3n de la Funcionalidad de la Aplicaci\u00f3n MongoDB CRUD","text":"<p>Esta aplicaci\u00f3n implementa un CRUD (Crear, Leer, Actualizar y Eliminar) sobre una base de datos MongoDB, permitiendo la gesti\u00f3n de usuarios y empleados. A continuaci\u00f3n, se detallan sus principales funciones:</p>"},{"location":"mongo/contenido/#1-creacion-de-bases-de-datos-y-colecciones","title":"1. Creaci\u00f3n de Bases de Datos y Colecciones","text":"<ul> <li>Se generan dos bases de datos:</li> <li><code>crud_database</code>: Contiene la colecci\u00f3n <code>users</code> para almacenar informaci\u00f3n de usuarios.</li> <li><code>employees_database</code>: Contiene la colecci\u00f3n <code>employees</code> para almacenar informaci\u00f3n de empleados.</li> <li>Cada base de datos inicia con un registro por defecto para evitar que est\u00e9n vac\u00edas.</li> </ul>"},{"location":"mongo/contenido/#2-insercion-de-datos","title":"2. Inserci\u00f3n de Datos","text":"<ul> <li>Insertar Usuario: Permite a\u00f1adir un \u00fanico usuario especificando su nombre, edad y ciudad.</li> <li>Insertar M\u00faltiples Usuarios: Opci\u00f3n para agregar varios usuarios a la base de datos en una sola operaci\u00f3n.</li> </ul>"},{"location":"mongo/contenido/#3-consulta-de-usuarios","title":"3. Consulta de Usuarios","text":"<ul> <li>Recupera y muestra todos los usuarios almacenados en la base de datos.</li> </ul>"},{"location":"mongo/contenido/#4-actualizacion-de-datos","title":"4. Actualizaci\u00f3n de Datos","text":"<ul> <li>Permite modificar la informaci\u00f3n de un usuario existente, espec\u00edficamente su edad.</li> </ul>"},{"location":"mongo/contenido/#5-eliminacion-de-datos","title":"5. Eliminaci\u00f3n de Datos","text":"<ul> <li>Eliminar Usuario: Borra un usuario espec\u00edfico de la base de datos bas\u00e1ndose en su nombre.</li> </ul>"},{"location":"mongo/contenido/#6-fusion-de-colecciones","title":"6. Fusi\u00f3n de Colecciones","text":"<ul> <li>Se combinan las colecciones <code>users</code> (de <code>crud_database</code>) y <code>employees</code> (de <code>employees_database</code>) en una nueva base de datos denominada <code>merged_database</code>, dentro de la colecci\u00f3n <code>merged_data</code>.</li> </ul>"},{"location":"mongo/contenido/#7-menu-de-navegacion","title":"7. Men\u00fa de Navegaci\u00f3n","text":"<ul> <li>La aplicaci\u00f3n proporciona una interfaz de men\u00fa en l\u00ednea de comandos, permitiendo al usuario seleccionar las diferentes funcionalidades de manera interactiva.</li> </ul> <p>Esta estructura facilita la gesti\u00f3n de usuarios y empleados en MongoDB de forma sencilla y eficiente. \ud83d\ude80</p>"},{"location":"mongo/contenido/#esquema-de-uso","title":"Esquema de uso","text":"<pre><code>graph LR;\n    subgraph Funcionalidades\n        A[Crear DB y Colecciones]\n        B[Insertar Usuario]\n        C[Insertar M\u00faltiples Usuarios]\n        D[Buscar Usuarios]\n        E[Actualizar Usuario]\n        F[Eliminar Usuario]\n        G[Fusionar Colecciones]\n    end\n\n    subgraph Bases de Datos\n        DB1[crud_database]\n        DB2[employees_database]\n        DB3[merged_database]\n    end\n\n    A --&gt;|Crea| DB1 &amp; DB2\n    B --&gt;|Inserta en| DB1\n    C --&gt;|Inserta varios en| DB1\n    D --&gt;|Consulta en| DB1\n    E --&gt;|Actualiza en| DB1\n    F --&gt;|Elimina en| DB1\n    G --&gt;|Fusiona DB1 y DB2 en| DB3\n</code></pre>"},{"location":"mongo/contenido/#glosario","title":"Glosario","text":"<ul> <li>A</li> <li>Actualizar Usuario</li> <li> <p>Aplicaci\u00f3n CRUD</p> </li> <li> <p>B</p> </li> <li> <p>Base de Datos</p> </li> <li> <p>C</p> </li> <li>Colecci\u00f3n</li> <li> <p>Crear Base de Datos y Colecciones</p> </li> <li> <p>D</p> </li> <li>Documento</li> <li>DB1 (<code>crud_database</code>)</li> <li>DB2 (<code>employees_database</code>)</li> <li> <p>DB3 (<code>merged_database</code>)</p> </li> <li> <p>E</p> </li> <li>Eliminar Usuario</li> <li> <p>Empleado</p> </li> <li> <p>F</p> </li> <li> <p>Fusi\u00f3n de Colecciones</p> </li> <li> <p>I</p> </li> <li>Insertar Usuario</li> <li> <p>Insertar M\u00faltiples Usuarios</p> </li> <li> <p>L</p> </li> <li> <p>Leer Usuarios</p> </li> <li> <p>M</p> </li> <li>MongoDB</li> <li> <p>Men\u00fa de Navegaci\u00f3n</p> </li> <li> <p>Q</p> </li> <li> <p>Query</p> </li> <li> <p>S</p> </li> <li> <p>Salir</p> </li> <li> <p>U</p> </li> <li>Usuario</li> </ul>"},{"location":"mongo/contenido/#glosario-de-conceptos-en-la-aplicacion-mongodb-crud","title":"Glosario de Conceptos en la Aplicaci\u00f3n MongoDB CRUD","text":""},{"location":"mongo/contenido/#a","title":"A","text":"<ul> <li>Actualizar Usuario: Modificar los datos de un usuario en la base de datos, generalmente la edad.</li> <li>Aplicaci\u00f3n CRUD: Sistema que permite realizar las operaciones b\u00e1sicas de una base de datos: Crear, Leer, Actualizar y Eliminar.</li> </ul>"},{"location":"mongo/contenido/#b","title":"B","text":"<ul> <li>Base de Datos: Contenedor estructurado donde se almacenan datos organizados en colecciones.</li> </ul>"},{"location":"mongo/contenido/#c","title":"C","text":"<ul> <li>Colecci\u00f3n: Equivalente a una tabla en bases de datos relacionales, almacena documentos dentro de una base de datos en MongoDB.</li> <li>Crear Base de Datos y Colecciones: Acci\u00f3n de generar nuevas bases de datos (<code>crud_database</code> y <code>employees_database</code>) con sus respectivas colecciones (<code>users</code> y <code>employees</code>).</li> </ul>"},{"location":"mongo/contenido/#d","title":"D","text":"<ul> <li>Documento: Unidad b\u00e1sica de almacenamiento en MongoDB, equivalente a una fila en bases de datos relacionales, representado en formato JSON.</li> <li>DB1 (<code>crud_database</code>): Base de datos principal que almacena informaci\u00f3n de usuarios.</li> <li>DB2 (<code>employees_database</code>): Base de datos secundaria que almacena informaci\u00f3n de empleados.</li> <li>DB3 (<code>merged_database</code>): Base de datos que almacena la fusi\u00f3n de <code>crud_database</code> y <code>employees_database</code>.</li> </ul>"},{"location":"mongo/contenido/#e","title":"E","text":"<ul> <li>Eliminar Usuario: Acci\u00f3n de borrar un usuario espec\u00edfico de la base de datos bas\u00e1ndose en su nombre.</li> <li>Empleado: Persona almacenada en la colecci\u00f3n <code>employees</code>, generalmente con datos como nombre, cargo y salario.</li> </ul>"},{"location":"mongo/contenido/#f","title":"F","text":"<ul> <li>Fusi\u00f3n de Colecciones: Proceso de combinar los datos de <code>users</code> y <code>employees</code> en una nueva colecci\u00f3n <code>merged_data</code> dentro de <code>merged_database</code>.</li> </ul>"},{"location":"mongo/contenido/#i","title":"I","text":"<ul> <li>Insertar Usuario: Acci\u00f3n de agregar un nuevo usuario en la colecci\u00f3n <code>users</code>.</li> <li>Insertar M\u00faltiples Usuarios: Proceso que permite agregar varios usuarios en una sola operaci\u00f3n a la base de datos.</li> </ul>"},{"location":"mongo/contenido/#l","title":"L","text":"<ul> <li>Leer Usuarios: Recuperar y mostrar todos los documentos almacenados en la colecci\u00f3n <code>users</code>.</li> </ul>"},{"location":"mongo/contenido/#m","title":"M","text":"<ul> <li>MongoDB: Base de datos NoSQL que almacena datos en documentos JSON en lugar de tablas relacionales.</li> <li>Men\u00fa de Navegaci\u00f3n: Interfaz interactiva en la terminal que permite a los usuarios seleccionar acciones dentro de la aplicaci\u00f3n.</li> </ul>"},{"location":"mongo/contenido/#q","title":"Q","text":"<ul> <li>Query: Consulta utilizada para buscar datos dentro de una colecci\u00f3n.</li> </ul>"},{"location":"mongo/contenido/#s","title":"S","text":"<ul> <li>Salir: Opci\u00f3n del men\u00fa que finaliza la ejecuci\u00f3n de la aplicaci\u00f3n.</li> </ul>"},{"location":"mongo/contenido/#u","title":"U","text":"<ul> <li>Usuario: Individuo almacenado en la colecci\u00f3n <code>users</code>, con atributos como nombre, edad y ciudad.</li> </ul>"},{"location":"mongo/mongopy/","title":"Mongopy","text":"30 Days Of Python: Day 27 - Python with MongoDB  <sub>Author: Asabeneh Yetayeh  Second Edition: July, 2021 </sub> <p>&lt;&lt; Day 26 | Day 28 &gt;&gt;</p> <p></p> <ul> <li>\ud83d\udcd8 Day 27</li> <li>Python with MongoDB</li> <li>MongoDB<ul> <li>SQL versus NoSQL</li> <li>Getting Connection String(MongoDB URI)</li> <li>Connecting Flask application to MongoDB Cluster</li> <li>Creating a database and collection</li> <li>Inserting many documents to collection</li> <li>MongoDB Find</li> <li>Find with Query</li> <li>Find query with modifier</li> <li>Limiting documents</li> <li>Find with sort</li> <li>Update with query</li> <li>Delete Document</li> <li>Drop a collection</li> </ul> </li> <li>\ud83d\udcbb Exercises: Day 27</li> </ul>"},{"location":"mongo/mongopy/#day-27","title":"\ud83d\udcd8 Day 27","text":""},{"location":"mongo/mongopy/#python-with-mongodb","title":"Python with MongoDB","text":"<p>Python is a backend technology and it can be connected with different data base applications. It can be connected to both SQL and noSQL databases. In this section, we connect Python with MongoDB database which is noSQL database. </p>"},{"location":"mongo/mongopy/#mongodb","title":"MongoDB","text":"<p>MongoDB is a NoSQL database. MongoDB stores data in a JSON like document which make MongoDB very flexible and scalable. Let us see the different terminologies of SQL and NoSQL databases. The following table will make the difference between SQL versus NoSQL databases.</p>"},{"location":"mongo/mongopy/#sql-versus-nosql","title":"SQL versus NoSQL","text":"<p>In this section, we will focus on a NoSQL database MongoDB. Lets sign up on mongoDB by click on the sign in button then click register on the next page.</p> <p></p> <p>Complete the fields and click continue</p> <p></p> <p>Select the free plan</p> <p></p> <p>Choose the proximate free region and give any name for you cluster.</p> <p></p> <p>Now, a free sandbox is created</p> <p></p> <p>All local host access</p> <p></p> <p>Add user and password</p> <p></p> <p>Create a mongoDB uri link</p> <p></p> <p>Select Python 3.6 or above driver</p> <p></p>"},{"location":"mongo/mongopy/#getting-connection-stringmongodb-uri","title":"Getting Connection String(MongoDB URI)","text":"<p>Copy the connection string link and you will get something like this:</p> <pre><code>mongodb+srv://asabeneh:&lt;password&gt;@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority\n</code></pre> <p>Do not worry about the url, it is a means to connect your application with mongoDB. Let us replace the password placeholder with the password you used to add a user.</p> <p>Example:</p> <pre><code>mongodb+srv://asabeneh:123123123@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority\n</code></pre> <p>Now, I replaced everything and the password is 123123 and the name of the database is thirty_days_python. This is just an example, your password must be stronger than the example password.</p> <p>Python needs a mongoDB driver to access mongoDB database. We will use pymongo with dnspython to connect our application with mongoDB base . Inside your project directory install pymongo and dnspython.</p> <pre><code>pip install pymongo dnspython\n</code></pre> <p>The \"dnspython\" module must be installed to use mongodb+srv:// URIs. The dnspython is a DNS toolkit for Python. It supports almost all record types.</p>"},{"location":"mongo/mongopy/#connecting-flask-application-to-mongodb-cluster","title":"Connecting Flask application to MongoDB Cluster","text":"<pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\nprint(client.list_database_names())\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <p>When we run the above code we get the default mongoDB databases.</p> <pre><code>['admin', 'local']\n</code></pre>"},{"location":"mongo/mongopy/#creating-a-database-and-collection","title":"Creating a database and collection","text":"<p>Let us create a database, database and collection in mongoDB will be created if it doesn't exist. Let's create a data base name thirty_days_of_python and students collection.</p> <p>To create a database:</p> <pre><code>db = client.name_of_databse # we can create a database like this or the second way\ndb = client['name_of_database']\n</code></pre> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\n\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <p>After we create a database, we also created a students collection and we used insert_one() method to insert a document. Now, the database thirty_days_of_python and students collection have been created and the document has been inserted. Check your mongoDB cluster and you will see both the database and the collection. Inside the collection, there will be a document.</p> <pre><code>['thirty_days_of_python', 'admin', 'local']\n</code></pre> <p>If you see this on the mongoDB cluster, it means you have successfully created a database and a collection.</p> <p></p> <p>If you have seen on the figure, the document has been created with a long id which acts as a primary key. Every time we create a document mongoDB create and unique id for it.</p>"},{"location":"mongo/mongopy/#inserting-many-documents-to-collection","title":"Inserting many documents to collection","text":"<p>The insert_one()  method inserts one item at a time if we want to insert many documents at once either we use insert_many() method or for loop. We can use for loop to inset many documents at once.</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\n\nstudents = [\n        {'name':'David','country':'UK','city':'London','age':34},\n        {'name':'John','country':'Sweden','city':'Stockholm','age':28},\n        {'name':'Sami','country':'Finland','city':'Helsinki','age':25},\n    ]\nfor student in students:\n    db.students.insert_one(student)\n\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre>"},{"location":"mongo/mongopy/#mongodb-find","title":"MongoDB Find","text":"<p>The find() and findOne() methods are common method to find data in a collection in mongoDB database. It is similar to the SELECT statement in a MySQL database. Let us use the find_one() method to get a document in a database collection.</p> <ul> <li>*find_one({\"_id\": ObjectId(\"id\"}): Gets the first occurrence if an id is not provided</li> </ul> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\nstudent = db.students.find_one()\nprint(student)\n\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Helsinki', 'city': 'Helsinki', 'age': 250}\n</code></pre> <p>The above query returns the first entry but we can target specific document using specific _id. Let us do one example, use David's id to get David object. '_id':ObjectId('5df68a23f106fe2d315bbc8c')</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nfrom bson.objectid import ObjectId # id object\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\nstudent = db.students.find_one({'_id':ObjectId('5df68a23f106fe2d315bbc8c')})\nprint(student)\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a23f106fe2d315bbc8c'), 'name': 'David', 'country': 'UK', 'city': 'London', 'age': 34}\n</code></pre> <p>We have seen, how to use find_one() using the above examples. Let's move one to find()</p> <ul> <li>find(): returns all the occurrence from a collection if we don't pass a query object. The object is pymongo.cursor object.</li> </ul> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\nstudents = db.students.find()\nfor student in students:\n    print(student)\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 250}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8c'), 'name': 'David', 'country': 'UK', 'city': 'London', 'age': 34}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8d'), 'name': 'John', 'country': 'Sweden', 'city': 'Stockholm', 'age': 28}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n</code></pre> <p>We can specify which fields to return by passing second object in the find({}, {}). 0 means not include and 1 means include but we can not mix 0 and 1, except for _id.</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\nstudents = db.students.find({}, {\"_id\":0,  \"name\": 1, \"country\":1}) # 0 means not include and 1 means include\nfor student in students:\n    print(student)\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'name': 'Asabeneh', 'country': 'Finland'}\n{'name': 'David', 'country': 'UK'}\n{'name': 'John', 'country': 'Sweden'}\n{'name': 'Sami', 'country': 'Finland'}\n</code></pre>"},{"location":"mongo/mongopy/#find-with-query","title":"Find with Query","text":"<p>In mongoDB find take a query object. We can pass a query object and we can filter the documents we like to filter out.</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\n\nquery = {\n    \"country\":\"Finland\"\n}\nstudents = db.students.find(query)\n\nfor student in students:\n    print(student)\n\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 250}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n</code></pre> <p>Query with modifiers</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\n\nquery = {\n    \"city\":\"Helsinki\"\n}\nstudents = db.students.find(query)\nfor student in students:\n    print(student)\n\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 250}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n</code></pre>"},{"location":"mongo/mongopy/#find-query-with-modifier","title":"Find query with modifier","text":"<pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\nquery = {\n    \"country\":\"Finland\",\n    \"city\":\"Helsinki\"\n}\nstudents = db.students.find(query)\nfor student in students:\n    print(student)\n\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 250}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n</code></pre> <p>Query with modifiers</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\nquery = {\"age\":{\"$gt\":30}}\nstudents = db.students.find(query)\nfor student in students:\n    print(student)\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 250}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8c'), 'name': 'David', 'country': 'UK', 'city': 'London', 'age': 34}\n</code></pre> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\nquery = {\"age\":{\"$gt\":30}}\nstudents = db.students.find(query)\nfor student in students:\n    print(student)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a23f106fe2d315bbc8d'), 'name': 'John', 'country': 'Sweden', 'city': 'Stockholm', 'age': 28}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n</code></pre>"},{"location":"mongo/mongopy/#limiting-documents","title":"Limiting documents","text":"<p>We can limit the number of documents we return using the limit() method.</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\ndb.students.find().limit(3)\n</code></pre>"},{"location":"mongo/mongopy/#find-with-sort","title":"Find with sort","text":"<p>By default, sort is in ascending order. We can change the sorting to descending order by adding -1 parameter.</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\nstudents = db.students.find().sort('name')\nfor student in students:\n    print(student)\n\n\nstudents = db.students.find().sort('name',-1)\nfor student in students:\n    print(student)\n\nstudents = db.students.find().sort('age')\nfor student in students:\n    print(student)\n\nstudents = db.students.find().sort('age',-1)\nfor student in students:\n    print(student)\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <p>Ascending order</p> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 250}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8c'), 'name': 'David', 'country': 'UK', 'city': 'London', 'age': 34}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8d'), 'name': 'John', 'country': 'Sweden', 'city': 'Stockholm', 'age': 28}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n</code></pre> <p>Descending order</p> <pre><code>{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8d'), 'name': 'John', 'country': 'Sweden', 'city': 'Stockholm', 'age': 28}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8c'), 'name': 'David', 'country': 'UK', 'city': 'London', 'age': 34}\n{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 250}\n</code></pre>"},{"location":"mongo/mongopy/#update-with-query","title":"Update with query","text":"<p>We will use update_one() method to update one item. It takes two object one is a query and the second is the new object. The first person, Asabeneh got a very implausible age. Let us update Asabeneh's age.</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\n\nquery = {'age':250}\nnew_value = {'$set':{'age':38}}\n\ndb.students.update_one(query, new_value)\n# lets check the result if the age is modified\nfor student in db.students.find():\n    print(student)\n\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 38}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8c'), 'name': 'David', 'country': 'UK', 'city': 'London', 'age': 34}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8d'), 'name': 'John', 'country': 'Sweden', 'city': 'Stockholm', 'age': 28}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n</code></pre> <p>When we want to update many documents at once we use upate_many() method.</p>"},{"location":"mongo/mongopy/#delete-document","title":"Delete Document","text":"<p>The method delete_one() deletes one document. The delete_one() takes a query object parameter. It only removes the first occurrence. Let us remove one John from the collection.</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\n\nquery = {'name':'John'}\ndb.students.delete_one(query)\n\nfor student in db.students.find():\n    print(student)\n# lets check the result if the age is modified\nfor student in db.students.find():\n    print(student)\n\n\napp = Flask(__name__)\nif __name__ == '__main__':\n    # for deployment we use the environ\n    # to make it work for both production and development\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(debug=True, host='0.0.0.0', port=port)\n</code></pre> <pre><code>{'_id': ObjectId('5df68a21f106fe2d315bbc8b'), 'name': 'Asabeneh', 'country': 'Finland', 'city': 'Helsinki', 'age': 38}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8c'), 'name': 'David', 'country': 'UK', 'city': 'London', 'age': 34}\n{'_id': ObjectId('5df68a23f106fe2d315bbc8e'), 'name': 'Sami', 'country': 'Finland', 'city': 'Helsinki', 'age': 25}\n</code></pre> <p>As you can see John has been removed from the collection.</p> <p>When we want to delete many documents we use delete_many() method, it takes a query object. If we pass an empty query object to delete_many({}) it will delete all the documents in the collection.</p>"},{"location":"mongo/mongopy/#drop-a-collection","title":"Drop a collection","text":"<p>Using the drop() method we can delete a collection from a database.</p> <pre><code># let's import the flask\nfrom flask import Flask, render_template\nimport os # importing operating system module\nimport pymongo\n\nMONGODB_URI = 'mongodb+srv://asabeneh:your_password_goes_here@30daysofpython-twxkr.mongodb.net/test?retryWrites=true&amp;w=majority'\nclient = pymongo.MongoClient(MONGODB_URI)\ndb = client['thirty_days_of_python'] # accessing the database\ndb.students.drop()\n</code></pre> <p>Now, we have deleted the students collection from the database.</p>"},{"location":"mongo/mongopy/#exercises-day-27","title":"\ud83d\udcbb Exercises: Day 27","text":"<p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p> <p>&lt;&lt; Day 26 | Day 28 &gt;&gt;</p>"},{"location":"mongo/practicamongo/","title":"PR\u00c0CTICA PYTHON \u2013 MongoDB","text":"<ul> <li> <p>Descarrega i instal\u00b7la MongoDB community Server  (junt amb MongoDBCompass, l'entorn gr\u00e0fic)</p> <ul> <li>https://www.mongodb.com/try/download/community</li> <li>Descarrega i instal\u00b7la el driver per accedir a MongoDB desde Python</li> <li>Accedeix a la carpeta \u201cScripts\u201d dins la teva instal\u00b7laci\u00f3 de Python i inicialitza all\u00ed un terminar</li> <li>Executa: pip install pymongo</li> </ul> </li> <li> <p>Respon a les seg\u00fcents preguntes i adjunta un exemple:</p> <ul> <li>MongoDB \u00e9s una base de dades relacional? Argumenta el perqu\u00e8</li> <li>Qu\u00e8 \u00e9s MongoDB Compass?</li> <li>Quina difer\u00e8ncia hi ha entre una Database i una Collection? </li> <li>Amb MongoDB Compass, com podem crear una nova Collection a partir d\u2019un .json?</li> </ul> </li> <li> <p>A trav\u00e9s d\u2019un programa Python, com podem afegir nous registres a una collection amb la funci\u00f3 insert_one?</p> <ul> <li>Qu\u00e8 \u00e9s el camp _id i perqu\u00e8 serveix?</li> <li>Com podem afegir m\u00faltiples registres amb insert_many  i com obtenim els seus _id?</li> </ul> </li> <li> <p>Respon a les seg\u00fcents preguntes i adjunta un exemple:</p> <ul> <li>Perqu\u00e8 serveixen els m\u00e8todes find i find_one i en qu\u00e8 es diferencien?</li> <li>C\u00f3m podem mostrar la informaci\u00f3 que retornen?</li> <li>C\u00f3m podem buscar un registre en concret en la bbdd?</li> </ul> </li> <li> <p>Respon a les seg\u00fcents preguntes i adjunta un exemple:</p> <ul> <li>Perqu\u00e8 serveixen els m\u00e8todes delete_one i delete_many i en qu\u00e8 es diferencien?</li> <li>Perqu\u00e8 serveixen els m\u00e8todes update_one i update_many i en qu\u00e8 es diferencien?</li> </ul> </li> </ul>"}]}